{"version":3,"sources":["comoonents/SingUpForm/SingUpForm.module.css","App.module.css","comoonents/Transition/fade.module.css","comoonents/Contact/ContactListItem/ContactItem.module.css","comoonents/Filter/Filter.module.css","comoonents/Alert/Alert.module.css","comoonents/Transition/slide.module.css","comoonents/Contact/ContactList.module.css","comoonents/Transition/pop.module.css","redux/contacts/contactsActions.js","redux/contacts/contactReducer.js","redux/store.js","comoonents/Alert/Alert.js","comoonents/SingUpForm/SingUpForm.js","comoonents/Contact/ContactListItem/ContactItem.js","comoonents/Contact/ContactList.js","comoonents/Filter/Filter.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addContact","createAction","deleteContact","changeFilter","localStorageContact","items","createReducer","contactsActions","state","payload","filter","contact","id","JSON","parse","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","contactReducer","store","configureStore","reducer","contacts","middleware","getDefaultMiddleware","serializableCheck","persistor","persistStore","Alert","className","style","alert","SingUpForm","name","number","isAlert","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","map","includes","setTimeout","reset","human","uuidv4","getContact","this","CSSTransition","in","timeout","classNames","slideTransition","unmountOnExit","onSubmit","styles","label","ntmlfor","loginInputId","input","type","onChange","minLength","placeholder","button","Component","mapDispatchToProps","connect","ContactItem","onDeleteContact","item","onClick","toLowerCase","TransitionGroup","component","list","popTransition","onChangeFilter","length","tittle","inputt","App","isOpen","container","fadeTransition","title","Boolean","window","location","hostname","match","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c1f8676.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"SingUpForm_label__3-1Oo\",\"input\":\"SingUpForm_input__5ll6i\",\"button\":\"SingUpForm_button__1Nj3q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3bpRq\",\"title\":\"App_title__bXBUw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"fade_enter__27C5d\",\"enterActive\":\"fade_enterActive__3hAQ3\",\"exit\":\"fade_exit__1hQce\",\"exitActive\":\"fade_exitActive__UDA_l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__2uxXD\",\"button\":\"ContactItem_button__2EGJk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tittle\":\"Filter_tittle__w9QNv\",\"inputt\":\"Filter_inputt__3D2R2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Alert_alert__9yn9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__1a1jD\",\"enterActive\":\"slide_enterActive__2q2cE\",\"exit\":\"slide_exit__1XB0n\",\"exitActive\":\"slide_exitActive__CVoeb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__39vzY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__35p9Y\",\"enterActive\":\"pop_enterActive__18GM4\",\"exit\":\"pop_exit__2rBzX\",\"exitActive\":\"pop_exitActive__uQmjr\"};","import { createAction } from '@reduxjs/toolkit';\r\n// import actionTypes from './contactsActionTypes';\r\n\r\nconst addContact = createAction('contacts/add');\r\nconst deleteContact = createAction('contacts/delete');\r\nconst changeFilter = createAction('contacts/changeFilter');\r\nconst localStorageContact = createAction('contacts/localStorage');\r\n\r\n// const addContact = getContact => ({\r\n//   type: actionTypes.ADD,\r\n//   payload: { getContact },\r\n// });\r\n\r\n// const deleteContact = id => ({\r\n//   type: actionTypes.DELETE,\r\n//   payload: {\r\n//     id,\r\n//   },\r\n// });\r\n\r\n// const changeFilter = filter => ({\r\n//   type: actionTypes.CHANGE_FILTER,\r\n//   payload: {\r\n//     filter,\r\n//   },\r\n// });\r\n\r\n// const localStorageContact = persistedContacts => ({\r\n//   type: actionTypes.LOCAL_STORAGE,\r\n//   payload: { persistedContacts },\r\n// });\r\n\r\nexport default {\r\n  addContact,\r\n  deleteContact,\r\n  changeFilter,\r\n  localStorageContact,\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import actionTypes from './contactsActionTypes';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst items = createReducer([], {\r\n  [contactsActions.addContact]: (state, { payload }) => [...state, payload],\r\n  [contactsActions.deleteContact]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n  [contactsActions.localStorageContact]: (state, { payload }) =>\r\n    JSON.parse(payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [contactsActions.changeFilter]: (state, { payload }) => payload,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case contactsActions.addContact.type:\r\n//       return [...state, payload];\r\n\r\n//     case contactsActions.deleteContact.type:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     case contactsActions.localStorageContact.type:\r\n//       return JSON.parse(payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case contactsActions.changeFilter.type:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.ADD:\r\n//       return [...state, payload.getContact];\r\n\r\n//     case actionTypes.DELETE:\r\n//       return state.filter(contact => contact.id !== payload.id);\r\n\r\n//     case actionTypes.LOCAL_STORAGE:\r\n//       return JSON.parse(payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case actionTypes.CHANGE_FILTER:\r\n//       return payload.filter;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// state = {\r\n//     contacts: [\r\n//       // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//       // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//       // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//       // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n//     ],\r\n\r\n//     filter: '',\r\n//     isOpen: false,\r\n//   };\r\n\r\n//   componentDidMount() {\r\n//     this.setState({\r\n//       isOpen: true,\r\n//     });\r\n//     const localStorageContacts = localStorage.getItem('contacts');\r\n//     if (localStorageContacts) {\r\n//       this.setState({ contacts: JSON.parse(localStorageContacts) });\r\n//     }\r\n//   }\r\n\r\n//   componentDidUpdate(prevProps, prevState) {\r\n//     if (prevState.contacts !== this.state.contacts) {\r\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n//     }\r\n//   }\r\n\r\n//   changeFilter = e => {\r\n//     this.setState({ filter: e.target.value });\r\n//   };\r\n\r\n//   handleGetContact = contact => {\r\n//     this.setState(prev => ({\r\n//       contacts: [...prev.contacts, contact],\r\n//     }));\r\n//   };\r\n\r\n//   deleteContact = id => {\r\n//     this.setState(state => ({\r\n//       contacts: state.contacts.filter(contact => contact.id !== id),\r\n//     }));\r\n//   };\r\n","// import { createStore, combineReducers } from 'redux';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport contactReducer from './contacts/contactReducer';\r\nimport { persistStore, persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst persistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n};\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactReducer,\r\n// });\r\n\r\n// const store = createStore(\r\n//   rootReducer,\r\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n// );\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// export const store = createStore(persistedReducer);\r\n\r\nconst persistedReducer = persistReducer(persistConfig, contactReducer);\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: persistedReducer,\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: false,\r\n  }),\r\n});\r\nexport const persistor = persistStore(store);\r\n","import React from 'react';\r\nimport style from './Alert.module.css';\r\n\r\nconst Alert = () => <h2 className={style.alert}>Contact already exists!</h2>;\r\n\r\nexport default Alert;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport styles from './SingUpForm.module.css';\r\nimport Alert from '../Alert/Alert';\r\nimport slideTransition from '../Transition/slide.module.css';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nclass SingUpForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isAlert: false,\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = e.target;\r\n    const repeatName = this.props.contacts.map(contact => contact.name);\r\n    if (!repeatName.includes(e.target.name.value)) {\r\n      const human = { id: uuidv4(), name: name.value, number: number.value };\r\n\r\n      this.props.getContact(human);\r\n\r\n      this.reset();\r\n    } else {\r\n      this.setState({ isAlert: true });\r\n      setTimeout(() => {\r\n        this.reset();\r\n      }, 3000);\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n      isAlert: false,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isAlert } = this.state;\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={isAlert}\r\n          timeout={500}\r\n          classNames={slideTransition}\r\n          unmountOnExit>\r\n          <Alert />\r\n        </CSSTransition>\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label className={styles.label} ntmlfor={this.loginInputId}>\r\n            Name\r\n            <input\r\n              className={styles.input}\r\n              type=\"text\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              name=\"name\"\r\n              minLength=\"3\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n          </label>\r\n          <br />\r\n          <label className={styles.label} ntmlfor={this.loginInputId}>\r\n            Number\r\n            <input\r\n              className={styles.input}\r\n              type=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              name=\"number\"\r\n              minLength=\"5\"\r\n              placeholder=\"Enter telephon number\"\r\n            />\r\n          </label>\r\n\r\n          <button className={styles.button} type=\"submit\">\r\n            Add contact {name}\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nSingUpForm.propTypes = {\r\n  getContact: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  getContact: contactsActions.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingUpForm);\r\n// export default SingUpForm;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactItem.module.css';\n\nconst ContactItem = ({ contact, onDeleteContact = () => null }) => {\n  return (\n    <>\n      <li className={styles.item}>\n        {contact.name} : {contact.number}\n        <button\n          className={styles.button}\n          type=\"button\"\n          id={contact.id}\n          onClick={onDeleteContact}>\n          Delete\n        </button>\n      </li>\n    </>\n  );\n};\n\nexport default ContactItem;\n\nContactItem.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contact: PropTypes.object,\n};\n","import React from 'react';\nimport ContactItem from './ContactListItem/ContactItem';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsActions from '../../redux/contacts/contactsActions';\n\nimport styles from './ContactList.module.css';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport popTransition from '../Transition/pop.module.css';\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <TransitionGroup component=\"ul\" className={styles.list}>\n      {contacts.map(contact => (\n        <CSSTransition\n          key={contact.id}\n          timeout={250}\n          unmountOnExit\n          classNames={popTransition}>\n          <ContactItem\n            contact={contact}\n            key={contact.id}\n            onDeleteContact={() => onDeleteContact(contact.id)}\n          />\n        </CSSTransition>\n      ))}\n    </TransitionGroup>\n  );\n};\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts.items.filter(contact =>\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n  ),\n});\n\nconst mapDispatchToProps = {\n  onDeleteContact: contactsActions.deleteContact,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n// export default ContactList;\n\nContactList.propTypes = {\n  onDeleteContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(PropTypes.object),\n};\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nconst Filter = ({ contacts, value, onChangeFilter }) =>\r\n  contacts.length >= 2 && (\r\n    <>\r\n      <h3 className={styles.tittle}>Find contact by name:</h3>,\r\n      <input\r\n        className={styles.inputt}\r\n        type=\"search\"\r\n        value={value}\r\n        onChange={e => onChangeFilter(e.target.value)}\r\n        placeholder=\"Find name\"\r\n      />\r\n    </>\r\n  );\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.changeFilter,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n// export default Filter;\r\n\r\nFilter.propTypes = {\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n  value: PropTypes.string,\r\n};\r\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\n// import { connect } from 'react-redux';\n// import contactsActions from './redux/contacts/contactsActions';\nimport SingUpForm from './comoonents/SingUpForm/SingUpForm';\nimport ContactList from './comoonents/Contact/ContactList';\nimport Filter from './comoonents/Filter/Filter';\nimport styles from './App.module.css';\nimport fadeTransition from './comoonents/Transition/fade.module.css';\n\nexport default class App extends Component {\n  state = {\n    isOpen: false,\n  };\n\n  componentDidMount() {\n    this.setState({\n      isOpen: true,\n    });\n  }\n\n  render() {\n    const { isOpen } = this.state;\n\n    return (\n      <div className={styles.container}>\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          classNames={fadeTransition}\n          unmountOnExit>\n          <h2 className={styles.title}>Phonebook</h2>\n        </CSSTransition>\n        <SingUpForm />\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          classNames={fadeTransition}\n          unmountOnExit>\n          <h2 className={styles.title}>Contacts</h2>\n        </CSSTransition>\n        <CSSTransition\n          in={isOpen}\n          timeout={500}\n          classNames={fadeTransition}\n          unmountOnExit>\n          <Filter />\n        </CSSTransition>\n        <ContactList />\n      </div>\n    );\n  }\n}\n\n// const mapStateToProps = state => ({\n//   contacts: state.contacts.items.filter(contact =>\n//     contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\n//   ),\n//   value: state.contacts.filter,\n// });\n\n// const mapDispatchToProps = {\n//   onDeleteContact: contactsActions.deleteContact,\n//   onChangeFilter: contactsActions.changeFilter,\n//   getContact: contactsActions.addContact,\n// };\n\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport App from './App';\n// import store from './redux/store';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}